import "./globals.css";
import type { Metadata, ResolvingMetadata } from "next";
import { Outfit, Noto_Sans_KR, Noto_Serif_KR } from "next/font/google";
import localFont from "next/font/local";
import { Analytics } from "@vercel/analytics/react";
import GoogleAnalytics from "@/components/GoogleAnalytics";
import Header from "@/components/Header";
import getInitDataFromS3 from "@/lib/getInitData";
import Footer from "@/components/Footer";

const notoSansKr = Noto_Sans_KR({
  weight: ["400", "700", "900"],
  subsets: ["latin"],
  variable: "--font-noto-sans-kr",
});

const notoSerifKr = Noto_Serif_KR({
  weight: ["400", "700", "900"],
  subsets: ["latin"],
  variable: "--font-noto-serif-kr",
});

const outfit = Outfit({
  weight: ["400", "700", "900"],
  subsets: ["latin"],
  variable: "--font-outfit",
});

const spoqaHanSansNeo = localFont({
  src: [
    {
      path: "../fonts/SpoqaHanSansNeo-Bold.woff2",
      weight: "700",
      style: "normal",
    },
    {
      path: "../fonts/SpoqaHanSansNeo-Light.woff2",
      weight: "300",
      style: "normal",
    },
    {
      path: "../fonts/SpoqaHanSansNeo-Medium.woff2",
      weight: "500",
      style: "normal",
    },
    {
      path: "../fonts/SpoqaHanSansNeo-Regular.woff2",
      weight: "400",
      style: "normal",
    },
    {
      path: "../fonts/SpoqaHanSansNeo-Thin.woff2",
      weight: "100",
      style: "normal",
    },
  ],
  variable: "--font-spoqa-han-sans-neo",
});
const cascadiaCode = localFont({
  src: [
    {
      path: "../fonts/CascadiaCode.woff2",
      weight: "400",
      style: "normal",
    },
    {
      path: "../fonts/CascadiaCodeItalic.woff2",
      weight: "400",
      style: "italic",
    },
  ],
  variable: "--font-cascadia-code",
});
const cascadiaMono = localFont({
  src: [
    {
      path: "../fonts/CascadiaMono.woff2",
      weight: "400",
      style: "normal",
    },
    {
      path: "../fonts/CascadiaMonoItalic.woff2",
      weight: "400",
      style: "italic",
    },
  ],
  variable: "--font-cascadia-mono",
});

// export const metadata: Metadata = {
//   title: process.env.APP_NAME,
//   description: "Generated by create next app",
// };

export async function generateMetadata(): Promise<Metadata> {
  return {
    metadataBase: new URL(process.env.NEXT_PUBLIC_APP_URL as string),
    title: `${process.env.APP_NAME}`,
    description: `${process.env.APP_DESCRIPTION}`,
    themeColor: "white",
    // themeColor: [
    //   { media: "(prefers-color-scheme: light)", color: "cyan" },
    //   { media: "(prefers-color-scheme: dark)", color: "black" },
    // ],
    openGraph: {
      title: `${process.env.APP_NAME}`,
      url: `${process.env.NEXT_PUBLIC_SITE_URL}`,
      description: `${process.env.APP_DESCRIPTION}`,
      locale: "ko_KR",
      type: "website",
    },
  };
}

export default async function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const { categories } = await getInitDataFromS3();
  return (
    <html
      lang={process.env.NEXT_PUBLIC_LANG || "en"}
      className={`${spoqaHanSansNeo.variable} ${outfit.variable} ${cascadiaMono.variable} ${cascadiaCode.variable} ${notoSerifKr.variable} flex h-auto w-full flex-col items-center bg-white font-spoqa-han-sans-neo`}
    >
      <GoogleAnalytics />
      <link
        rel="icon"
        href="/icon?<generated>"
        type="image/png"
        sizes="32x32"
      />
      <body className="flex h-auto w-11/12 max-w-7xl flex-col items-center gap-y-4">
        <Header categories={categories} />
        {children}
        <Footer />
        <Analytics />
      </body>
    </html>
  );
}
